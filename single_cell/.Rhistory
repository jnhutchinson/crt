library(tidyverse)
library(Seurat)
library(RCurl)
library(Rtsne)
seurat_metadata <- readRDS("data/2_fixed_barcodes/seurat.metadata.RDS")
seurat <- NormalizeData(seurat_raw,
normalization.method = "LogNormalize",
scale.factor = 10000)
seurat <- NormalizeData(seurat_metadata,
normalization.method = "LogNormalize",
scale.factor = 10000)
rm(seurat_metadata)
seurat <- FindVariableFeatures(object = seurat,
selection.method = "vst",
nfeatures = params$variable_features)
saveRDS(seurat, "data/2_fixed_barcodes/seurat.normalized.RDS")
#seurat_metadata <- readRDS("data/2_fixed_barcodes/seurat.metadata.RDS")
seurat_metadata <- readRDS("data/2_fixed_barcodes/seurat.stringent_filter.RDS")
seurat <- NormalizeData(seurat_metadata,
normalization.method = "LogNormalize",
scale.factor = 10000)
rm(seurat_metadata)
seurat <- FindVariableFeatures(object = seurat,
selection.method = "vst",
nfeatures = params$variable_features)
saveRDS(seurat, "data/2_fixed_barcodes/seurat.normalized.RDS")
mouse_genes <- read_csv("tables/ensembl_w_description.mouse.protein_coding.csv")
top20 <- tibble(ensembl_gene_id = head(x = VariableFeatures(object = seurat),
n = 20))
top20 <- top20 %>%
left_join(mouse_genes, by = c("ensembl_gene_id" = "ensembl_gene_id")) %>%
dplyr::select(ensembl_gene_id, external_gene_name)
no_names <- top20 %>% dplyr::filter(is.na(external_gene_name))
no_names$external_gene_name <- no_names$ensembl_gene_id
top20 <- top20 %>% dplyr::filter(!is.na(external_gene_name)) %>%
bind_rows(no_names)
plot1 <- VariableFeaturePlot(object = seurat)
LabelPoints(plot = plot1,
points = top20$ensembl_gene_id,
labels = top20$external_gene_name) +
ggtitle ("Top 20 variable genes")
top50 <- tibble(ensembl_gene_id = head(x = VariableFeatures(object = seurat),
n = 50))
top50 <- top50 %>%
left_join(mouse_genes, by = c("ensembl_gene_id" = "ensembl_gene_id"))
write_csv(top50, "tables/top50_variable_genes.non_filtered.csv")
top50
# 2k genes ok, no difference between 2k and 3k. 3k is crashing sometimes
topX <- tibble(ensembl_gene_id = head(x = VariableFeatures(object = seurat),
n = params$variable_features)) %>%
left_join(mouse_genes, by = c("ensembl_gene_id" = "ensembl_gene_id"))
genes <- mouse_genes$ensembl_gene_id
# requires 31.8Gb RAM for all features and 17G for protein coding
# fast
if (params$heavy_calc){
seurat <- ScaleData(object = seurat,
features = topX$ensembl_gene_id)
}
#cell_cycle_file <- "https://raw.githubusercontent.com/hbc/tinyatlas/master/cell_cycle/Mus_musculus.csv"
cell_cycle_genes <- read_csv("tables/mus_musculus_cell_cycle.csv")
s_genes <- cell_cycle_genes %>%
dplyr::filter(phase == "S") %>%
pull(geneID)
g2m_genes <- cell_cycle_genes %>%
dplyr::filter(phase == "G2/M") %>%
pull(geneID)
seurat <- CellCycleScoring(seurat,
g2m.features = g2m_genes,
s.features = s_genes)
# heavy, memory intense
seurat <- RunPCA(seurat)
DimPlot(seurat,
reduction = "pca",
group.by = "Phase") +
ggtitle("PCA before regression of covariates")
# Define variables in metadata to regress
vars_to_regress <- c("nUMI", "S.Score", "G2M.Score", "mitoRatio")
seurat <- ScaleData(object = seurat,
vars.to.regress = vars_to_regress,
verbose = FALSE)
# Re-run the PCA - heavy
seurat <- RunPCA(object = seurat)
DimPlot(object = seurat,
reduction = "pca",
group.by = "Phase") +
ggtitle("PCA after regression")
print(x = seurat[["pca"]],
dims = 1:10,
nfeatures = 5)
ElbowPlot(object = seurat,
ndims = 30) +
geom_vline(xintercept = 13.5)
pct <- seurat[["pca"]]@stdev / sum(seurat[["pca"]]@stdev) * 100
# Calculate cumulative percents for each PC
cumu <- cumsum(pct)
# Determine which PC exhibits cumulative percent greater than 90% and % variation associated with the PC as less than 5
co1 <- which(cumu > 90 & pct < 5)[1]
co2 <- sort(which((pct[1:length(pct) - 1] - pct[2:length(pct)]) > 0.1), decreasing = T)[1] + 1
# last point where change of % of variation is more than 0.1%.
pc_threshold <- min(co1, co2)
pc_threshold
plot_df <- data.frame(pct = pct, cumu = cumu, rank = 1:length(pct))
ggplot(plot_df, aes(cumu, pct, label = rank, color = rank > pc_threshold)) +
geom_text() +
geom_vline(xintercept = 90, color = "grey") +
geom_hline(yintercept = min(pct[pct > 5]), color = "grey") + theme_bw() +
ggtitle("Significant PCs")
PC threshold: `pc_threshold`
seurat <- FindNeighbors(object = seurat,
dims = 1:pc_threshold)
# heavy - 40s
seurat <- FindClusters(object = seurat,
resolution = c(0.4, 0.6, 0.8, 1.0, 1.2, 1.8))
seurat <- RunTSNE(object = seurat,
check_duplicates = F)
Idents(object = seurat) <- "RNA_snn_res.0.8"
DimPlot(object = seurat,
label = T,
reduction = "tsne",
plot.title = "t-SNE")
Idents(object = seurat) <- "RNA_snn_res.0.4"
DimPlot(object = seurat,
label = T,
reduction = "tsne",
plot.title = "t-SNE")
Idents(object = seurat) <- "RNA_snn_res.0.8"
DimPlot(seurat,
reduction = "umap",
label = TRUE,
label.size = 6,
plot.title = "UMAP_snn.res.0.8")
#for UMAP it is necessary to install python umap-learn
seurat <- RunUMAP(seurat,
reduction = "pca",
dims = 1:pc_threshold)
Idents(object = seurat) <- "RNA_snn_res.0.8"
DimPlot(seurat,
reduction = "umap",
label = TRUE,
label.size = 6,
plot.title = "UMAP_snn.res.0.8")
Idents(object = seurat) <- "RNA_snn_res.0.4"
# Plot the UMAP
DimPlot(seurat,
reduction = "umap",
label = TRUE,
label.size = 6,
plot.title = "UMAP_RNA_snn_res.0.4")
group_by <- c("Phase")
# Getting coordinates for cells to use for UMAP and associated grouping variable information
class_umap_data <- FetchData(seurat,
vars = c("ident", "UMAP_1", "UMAP_2", group_by))
# Adding cluster label to center of cluster on UMAP
umap_label <- FetchData(seurat,
vars = c("ident", "UMAP_1", "UMAP_2"))  %>%
group_by(ident) %>%
summarise(x = mean(UMAP_1), y = mean(UMAP_2))
# Getting coordinates for cells to use for PCA and associated grouping variable information
class_pca_data <- FetchData(seurat,
vars = c("ident", "PC_1", "PC_2", group_by))
# Adding cluster label to center of cluster on PCA
pca_label <- FetchData(seurat,
vars = c("ident", "PC_1", "PC_2"))  %>%
mutate(ident = seurat@active.ident) %>%
group_by(ident) %>%
summarise(x = mean(PC_1), y = mean(PC_2))
# Function to plot UMAP and PCA as grids
plot_grid(
ggplot(class_umap_data, aes(UMAP_1, UMAP_2)) +
geom_point(aes_string(color = group_by), alpha = 0.7) +
scale_color_brewer(palette = "Set2")  +
geom_text(data=umap_label, aes(label=ident, x, y)),
ggplot(class_pca_data, aes(PC_1, PC_2)) +
geom_point(aes_string(color = group_by), alpha = 0.7) +
scale_color_brewer(palette = "Set2")  +
geom_text(data=pca_label,
aes(label=ident, x, y)),
nrow = 1,
align = "v")
n_cells <- FetchData(seurat,
vars = c("ident")) %>%
dplyr::count(ident)
n_cells %>% ggplot(aes(x = ident, y = n)) + geom_col() +
ggtitle("Number of cells in clusters")+
geom_text(aes(label = n), hjust = 0) +
coord_flip() +
xlab("Cluster ID") +
ylab("Number of cells")
group_by <- c("Phase")
# Getting coordinates for cells to use for UMAP and associated grouping variable information
class_umap_data <- FetchData(seurat,
vars = c("ident", "UMAP_1", "UMAP_2", group_by))
# Adding cluster label to center of cluster on UMAP
umap_label <- FetchData(seurat,
vars = c("ident", "UMAP_1", "UMAP_2"))  %>%
group_by(ident) %>%
summarise(x = mean(UMAP_1), y = mean(UMAP_2))
# Getting coordinates for cells to use for PCA and associated grouping variable information
class_pca_data <- FetchData(seurat,
vars = c("ident", "PC_1", "PC_2", group_by))
# Adding cluster label to center of cluster on PCA
pca_label <- FetchData(seurat,
vars = c("ident", "PC_1", "PC_2"))  %>%
mutate(ident = seurat@active.ident) %>%
group_by(ident) %>%
summarise(x = mean(PC_1), y = mean(PC_2))
library(cowplot)
# Function to plot UMAP and PCA as grids
plot_grid(
ggplot(class_umap_data, aes(UMAP_1, UMAP_2)) +
geom_point(aes_string(color = group_by), alpha = 0.7) +
scale_color_brewer(palette = "Set2")  +
geom_text(data=umap_label, aes(label=ident, x, y)),
ggplot(class_pca_data, aes(PC_1, PC_2)) +
geom_point(aes_string(color = group_by), alpha = 0.7) +
scale_color_brewer(palette = "Set2")  +
geom_text(data=pca_label,
aes(label=ident, x, y)),
nrow = 1,
align = "v")
# Determine metrics to plot present in seurat_control@meta.data
# no nUMI nGene mitoRatio
metrics <-  c("S.Score", "G2M.Score")
# Extract the UMAP coordinates for each cell and include information about the metrics to plot
qc_data <- FetchData(seurat,
vars = c(metrics, "ident", "UMAP_1", "UMAP_2"))
# Plot a UMAP plot for each metric
map(metrics, function(qc){
ggplot(qc_data,
aes(UMAP_1, UMAP_2)) +
geom_point(aes_string(color=qc),
alpha = 0.7) +
scale_color_gradient(guide = FALSE,
low = "grey90",
high = "blue")  +
geom_text(data=umap_label,
aes(label = ident, x, y)) +
ggtitle(qc)
}) %>% plot_grid(plotlist = .)
# Defining the information in the seurat object of interest
columns <- c(paste0("PC_", 1:pc_threshold),
"ident",
"UMAP_1", "UMAP_2")
# Extracting this data from the seurat object
pc_data <- FetchData(seurat,
vars = columns)
map(paste0("PC_", 1:pc_threshold), function(pc){
ggplot(pc_data,
aes(UMAP_1, UMAP_2)) +
geom_point(aes_string(color=pc),
alpha = 0.7) +
scale_color_gradient(guide = FALSE,
low = "grey90",
high = "blue")  +
geom_text(data=umap_label,
aes(label=ident, x, y)) +
ggtitle(pc)
}) %>% plot_grid(plotlist = .)
filter_path <- paste0("data/2_fixed_barcodes/",params$filter_level,"/")
seurat_file <- paste0(filter_path,"seurat.", filter_level, ".RDS")
filter_path <- paste0("data/2_fixed_barcodes/", params$filter_level,"/")
filter_path
knitr::opts_chunk[["set"]](
cache = FALSE,
dev = c("png", "pdf"),
fig.height = 10L,
fig.retina = 2L,
fig.width = 10L,
highlight = TRUE,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
echo = TRUE
)
chips <- read_csv("chips.csv")
library(knitr)
library(tidyverse)
library(tidyverse)
ggplot2::theme_set(theme_light(base_size = 14))
opts_chunk[["set"]](
cache = FALSE,
dev = c("png", "pdf"),
error = TRUE,
highlight = TRUE,
message = FALSE,
prompt = FALSE,
tidy = FALSE,
warning = FALSE)
chips <- read_csv("chips.csv")
View(chips)
datasets <- read_csv("data/datasets.csv")
View(datasets)
bacterial_sepsis_mega <- read_tsv("data/bacterial_sepsis_x164/bacterial_sepsis_x164.MEG_A1_A.NLRP11.snpinfo.tsv")
View(bacterial_sepsis_mega)
bacterial_sepsis_mega <- read_tsv("data/bacterial_sepsis_x164/bacterial_sepsis_x164.MEGA.NLRP11.snpinfo.tsv")
View(bacterial_sepsis_mega)
bacterial_sepsis_mega.snp_info <- read_tsv("data/bacterial_sepsis_x164/bacterial_sepsis_x164.MEGA.NLRP11.snpinfo.tsv")
View(bacterial_sepsis_mega.snp_info)
View(bacterial_sepsis_mega)
bacterial_sepsis_mega <- read_tsv("data/bacterial_sepsis_x164/bacterial_sepsis_x164.MEGA.NLRP11.tsv")
View(bacterial_sepsis_mega)
View(bacterial_sepsis_mega.snp_info)
View(bacterial_sepsis_mega.snp_info)
View(bacterial_sepsis_mega)
View(bacterial_sepsis_mega.snp_info)
View(bacterial_sepsis_mega.snp_info)
bacterial_sepsis_mega.snp_info <- read_tsv("data/bacterial_sepsis_x164/bacterial_sepsis_x164.MEGA.NLRP11.snpinfo.tsv") %>%
select(SNPname, Annotation) %>% rename (snp_name = SNPname, annotation = Annotation)
View(bacterial_sepsis_mega.snp_info)
View(bacterial_sepsis_mega)
bacterial_sepsis_mega <- read_tsv("data/bacterial_sepsis_x164/bacterial_sepsis_x164.MEGA.NLRP11.tsv") %>%
left_join(bacterial_sepsis_mega.snp_info, by = c("ID" = "snp_name"))
View(bacterial_sepsis_mega)
getwd()
setwd("~/Desktop/code/code.harvard.edu/hbc02514_Ressler_McCullough_snRNA-seq_mouse_and_monkey_brain_region_responses_fear_conditioning/")
library(knitr)
library(cowplot)
library(tidyverse)
library(tidyverse)
library(Seurat)
library(RCurl)
library(Seurat)
library(RCurl)
library(Rtsne)
ggplot2::theme_set(theme_light(base_size = 14))
opts_chunk[["set"]](
cache = FALSE,
dev = c("png", "pdf"),
error = TRUE,
highlight = TRUE,
message = FALSE,
prompt = FALSE,
tidy = FALSE,
warning = FALSE)
filter_path <- paste0("data/", params$replicate, "/", params$filter_level, "/")
seurat_file <- paste0(filter_path,"seurat.", params$filter_level, ".RDS")
seurat_metadata <- readRDS(seurat_file)
seurat <- NormalizeData(seurat_metadata,
normalization.method = "LogNormalize",
scale.factor = 10000)
rm(seurat_metadata)
seurat <- FindVariableFeatures(object = seurat,
selection.method = "vst",
nfeatures = params$variable_features)
saveRDS(seurat, paste0(filter_path, "seurat.normalized.RDS"))
mouse_genes <- read_csv("tables/ensembl_w_description.mouse.protein_coding.csv")
top20 <- tibble(ensembl_gene_id = head(x = VariableFeatures(object = seurat),
n = 20))
top20 <- top20 %>%
left_join(mouse_genes, by = c("ensembl_gene_id" = "ensembl_gene_id")) %>%
dplyr::select(ensembl_gene_id, external_gene_name)
no_names <- top20 %>% dplyr::filter(is.na(external_gene_name))
no_names$external_gene_name <- no_names$ensembl_gene_id
top20 <- top20 %>% dplyr::filter(!is.na(external_gene_name)) %>%
bind_rows(no_names)
plot1 <- VariableFeaturePlot(object = seurat)
LabelPoints(plot = plot1,
points = top20$ensembl_gene_id,
labels = top20$external_gene_name) +
ggtitle ("Top 20 variable genes")
top50 <- tibble(ensembl_gene_id = head(x = VariableFeatures(object = seurat),
n = 50))
top50 <- top50 %>%
left_join(mouse_genes, by = c("ensembl_gene_id" = "ensembl_gene_id"))
write_csv(top50, paste0(filter_path, "top50_variable_genes.csv"))
top50
# 2k genes ok, no difference between 2k and 3k. 3k is crashing sometimes
topX <- tibble(ensembl_gene_id = head(x = VariableFeatures(object = seurat),
n = params$variable_features)) %>%
left_join(mouse_genes, by = c("ensembl_gene_id" = "ensembl_gene_id"))
genes <- mouse_genes$ensembl_gene_id
seurat <- ScaleData(object = seurat,
features = topX$ensembl_gene_id)
#cell_cycle_file <- "https://raw.githubusercontent.com/hbc/tinyatlas/master/cell_cycle/Mus_musculus.csv"
cell_cycle_genes <- read_csv("tables/mouse.cell_cycle.csv")
s_genes <- cell_cycle_genes %>%
dplyr::filter(phase == "S") %>%
pull(geneID)
g2m_genes <- cell_cycle_genes %>%
dplyr::filter(phase == "G2/M") %>%
pull(geneID)
seurat <- CellCycleScoring(seurat,
g2m.features = g2m_genes,
s.features = s_genes)
# heavy, memory intense
seurat <- RunPCA(seurat)
saveRDS(seurat, paste0(filter_path, "seurat.pca1.RDS"))
?RunUMAP
?FindAllMarkers
filter_path <- paste0("data/", params$filter_level,"/")
filter_path
getwd()
setwd("~/Desktop/code/code.harvard.edu/fenster2019/data/")
setwd("..")
getwd()
pbmc
library(knitr)
library(cowplot)
library(tidyverse)
library(Seurat)
library(RCurl)
library(Rtsne)
ggplot2::theme_set(theme_light(base_size = 14))
opts_chunk[["set"]](
cache = FALSE,
dev = c("png", "pdf"),
error = TRUE,
highlight = TRUE,
message = FALSE,
prompt = FALSE,
tidy = FALSE,
warning = FALSE)
pbmc_small
pbmc_data <- Read10X(data.dir = "data/pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/")
pbmc_data
pbmc <- CreateSeuratObject(counts = pbmc_data,
project = "pbmc3k",
min.cells = 3,
min.features = 200)
pbmc
pbmc
pbmc@assays
pbmc@active.ident
dim(pbmc3k)
dim(pbmc)
names(pbmc)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
?PercentageFeatureSet
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc[["percent.mt"]]
head(pbmc[["percent.mt"]])
head(pbmc@meta.data, 5)
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
?CombinePlots
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots (plot1, plot2)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots (plot1, plot2)
CombinePlots(list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
dim(pbmc)
nrow(pbmc)
ncol(pbmc)
?VlnPlot
pbmc <- NormalizeData(pbmc)
?NormalizeData
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(pbmc), 10)
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, point = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(pbmc), 10)
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, point = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
top20 <- head(VariableFeatures(pbmc), 20)
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, point = top20, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
?FindVariableFeatures
getwd()
setwd("~/Desktop/code/crt/single_cell/")
getwd()
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2500)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
?SCTransform
pbmc_data <- Read10X(data.dir = "data/pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/")
pbmc <- CreateSeuratObject(counts = pbmc_data,
project = "pbmc3k",
min.cells = 3,
min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc_data <- Read10X(data.dir = "data/pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/")
pbmc <- CreateSeuratObject(counts = pbmc_data,
project = "pbmc3k",
min.cells = 3,
min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- SCTransform(pbmc, vars.to.regress = "percent.mt")
pbmc <- RunPCA(pbmc, verbose = FALSE)
pbmc <- RunUMAP(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindNeighbors(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindClusters(pbmc, verbose = FALSE)
DimPlot(pbmc, label = TRUE) + NoLegend()
?SCTransform
?RunPCA
?FindNeighbors
sessionInfo()
?runUMAP
?RunUMAP
?SCTransform
print("test")
print("Test")
date()
print(date())
date
date()
print(date())
